xvar Search, cheerio, defs, request, url,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

cheerio = require('cheerio');

request = require('request');

url = require('url');

defs = require('./defs');

Search = (function() {

  function Search(options) {
    this.options = options != null ? options : {};
    this.perform = __bind(this.perform, this);

    this.parseHTML = __bind(this.parseHTML, this);

    this.getUrl = __bind(this.getUrl, this);

    this.handleOptions = __bind(this.handleOptions, this);

    this.handleOptions();
  }

  Search.prototype.handleOptions = function() {
    var _base, _base1, _base10, _base11, _base12, _base13, _base14, _base15, _base16, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if ((_ref = (_base = this.options).protocol) == null) {
      _base.protocol = 'http';
    }
    if ((_ref1 = (_base1 = this.options).hostname) == null) {
      _base1.hostname = 'www.leboncoin.fr';
    }
    if ((_ref2 = (_base2 = this.options).category) == null) {
      _base2.category = 'annonces';
    }
    if ((_ref3 = (_base3 = this.options).debug) == null) {
      _base3.debug = false;
    }
    if ((_ref4 = (_base4 = this.options).verbose) == null) {
      _base4.verbose = false;
    }
    if ((_ref5 = (_base5 = this.options).page) == null) {
      _base5.page = 1;
    }
    if ((_ref6 = (_base6 = this.options).shouldbe) == null) {
      _base6.shouldbe = '';
    }
    if ((_ref7 = (_base7 = this.options).query) == null) {
      _base7.query = null;
    }
    if ((_ref8 = (_base8 = this.options).region) == null) {
      _base8.region = 'ile_de_france';
    }
    if ((_ref9 = (_base9 = this.options).department) == null) {
      _base9.department = 'occasions';
    }
    if ((_ref10 = (_base10 = this.options).urgency_only) == null) {
      _base10.urgency_only = false;
    }
    if ((_ref11 = (_base11 = this.options).sort_by_price) == null) {
      _base11.sort_by_price = false;
    }
    if ((_ref12 = (_base12 = this.options).hide_photos) == null) {
      _base12.hide_photos = false;
    }
    if ((_ref13 = (_base13 = this.options).in_title) == null) {
      _base13.in_title = false;
    }
    if ((_ref14 = (_base14 = this.options).url) == null) {
      _base14.url = false;
    }
    if ((_ref15 = (_base15 = this.options).location) == null) {
      _base15.location = null;
    }
    return (_ref16 = (_base16 = this.options).category_attrs) != null ? _ref16 : _base16.category_attrs = {};
  };

  Search.prototype.getUrl = function() {
    var k, pathname, query, v, _ref, _ref1;
    if (this.options.url) {
      return this.options.url;
    }
    pathname = "" + this.options.category + "/offres/" + this.options.region + "/" + this.options.department + "/";
    query = {};
    if (this.options.page > 1) {
      query.o = parseInt(this.options.page, 10);
    }
    if (this.options.query) {
      query.q = this.options.query;
    }
    if ((_ref = this.options.filter) === 'c' || _ref === 'p') {
      query.f = this.options.filter;
    }
    if (this.options.urgency_only) {
      query.ur = 1;
    }
    if (this.options.sort_by_price) {
      query.sp = 1;
    }
    if (this.options.hide_photos) {
      query.th = 0;
    }
    if (this.options.in_title) {
      query.it = 1;
    }
    if (this.options.location) {
      query.location = this.options.location;
    }
    _ref1 = this.options.category_attrs;
    for (k in _ref1) {
      v = _ref1[k];
      query[k] = v;
    }
    return url.format({
      hostname: this.options.hostname,
      protocol: this.options.protocol,
      pathname: pathname,
      query: query
    });
  };

  Search.prototype.parseHTML = function(html) {
    var results;
    results = [];
    return results;
  };

  Search.prototype.perform = function(callback) {
    var _url,
      _this = this;
    _url = this.getUrl();
    return request(_url, function(error, response, html) {
      var results;
      results = _this.parseHTML(html);
      return callback({
        error: error,
        response: response,
        html: html,
        results: results
      });
    });
  };

  return Search;

})();

module.exports = Search;
